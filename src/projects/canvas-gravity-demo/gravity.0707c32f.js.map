{"version":3,"sources":["Ball.js","gravity.js"],"names":["Ball","canvas","ctx","radius","x","y","vx","vy","color","g","b","width","height","f","Math","abs","draw","beginPath","gradient","createRadialGradient","addColorStop","fillStyle","arc","PI","closePath","fill","currentLoopTimestamp","fps","document","getElementById","getContext","lastLoopTimestamp","Date","countMultiplier","count","gravity","bounce","balls","calcFPS","lastTimestamp","currentTimestamp","round","drawText","font","fillText","toFixed","init","i","floor","random","startVx","startVy","startX","startY","red","blue","green","now","clearRect","createLinearGradient","fillRect","forEach","setGravity","setBounce","update","requestAnimationFrame","window","addEventListener","innerHeight","innerWidth","e","code","length"],"mappings":"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","file":"gravity.0707c32f.js","sourceRoot":"..","sourcesContent":["// Ball\n\nclass Ball {\n  constructor(canvas, ctx, radius, x, y, vx, vy, color, g, b) {\n    this.canvas = canvas; // canvas\n    this.ctx = ctx; // canvas context\n    this.radius = radius || 10;\t// radius\n    this.x = x || canvas.width / 2; // initial x position\n    this.y = y || canvas.height / 4;\t// initial y position\n    this.vx = vx || 0; // initial x velocity\n    this.vy = vy || 0; // initial y velocity\n    this.f = 0.97; // friction effect\n    this.color = color || '#000000'; // color\n    this.g = g; // gravity\n    this.b = b; // bounce\n  }\n\n  setGravity(g) {\n    this.g = g;\n  }\n\n  setBounce(b) {\n    this.b = b;\n  }\n\n  // physics\n  update() {\n    this.x += this.vx; // apply x velocity to x position\n    this.vy += this.g; // apply gravity to y velocity\n    this.y += this.vy; // apply y velocity to y position\n\n    // if ball is above window, reposition to top, introduce bounce and apply friction\n    if(this.y - this.radius < 0) {\n      this.y = 0 + this.radius;\n      this.vy *= -this.b;\n      if(Math.abs(this.vx) > 0) {\n        this.vx *= this.f;\n      }\n    }\n\n    // if ball is below window, reposition to bottom, introduce bounce and apply friction\n    if(this.y + this.radius > this.canvas.height) {\n      this.y = this.canvas.height - this.radius;\n      this.vy *= -this.b;\n      if(Math.abs(this.vx) > 0) {\n        this.vx *= this.f;\n      }\n    }\n\n    // if ball hits right of the window, bounce off and apply friction\n    if(this.x + this.radius > this.canvas.width) {\n      this.x = this.canvas.width - this.radius;\n      this.vx *= -this.b;\n      this.vx *= this.f;\n    }\n\n    // if ball hits left of the window, bounce off and apply friction\n    if (this.x - this.radius < 0) {\n      this.x = 0 + this.radius;\n      this.vx *= -this.b;\n      this.vx *= this.f;\n    }\n\n    this.draw();\n  }\n\n  // draw the ball\n  draw() {\n    this.ctx.beginPath();\n\n    const gradient = this.ctx.createRadialGradient(\n      this.x,\n      this.y,\n      this.radius,\n      this.x + this.radius,\n      this.y + this.radius,\n      this.radius\n    );\n\n    gradient.addColorStop(0.5, this.color);\n    gradient.addColorStop(0, 'rgb(255,243,200)');\n    this.ctx.fillStyle = gradient;\n\n    this.ctx.arc(this.x,this.y,this.radius,0,Math.PI*2,true);\n    this.ctx.closePath();\n    this.ctx.fill();\n  }\n}\n\nexport default Ball;\n","// Gravity\n// Â© 2016 - 2020 Michael Hamilton\n\nimport Ball from './Ball';\n\nconst canvas = document.getElementById('canvas'); // canvas element\nconst ctx = canvas.getContext('2d'); // canvas context\nlet lastLoopTimestamp = new Date(); // time of last loop\nlet currentLoopTimestamp;\nlet fps; // fps\nlet countMultiplier = 5; // number of balls to initialize for use in our demo\nlet count = 10 * countMultiplier; // number of balls to initialize for use in our demo\nlet gravity = 0.5; // global gravity effect\nlet bounce = 0.7; // bounce effect\nconst balls = []; // here, hold these\n\n// Calculates FPS\nconst calcFPS = (lastTimestamp, currentTimestamp) => {\n  fps = 1000 / (currentTimestamp - lastTimestamp);\n  return Math.round(fps);\n}\n\n// Draw title, fps, etc\nconst drawText = (ctx) => {\n  ctx.fillStyle = 'white';\n  ctx.font = '24px sans-serif';\n  ctx.fillText('gravity demo', 10, 20);\n\n  ctx.font = \"14px sans-serif\";\n  ctx.fillText('press space to reset', 10, 45);\n  ctx.fillText('up/down to change gravity', 10, 65);\n  ctx.fillText('left/right to change bounce', 10, 85);\n  ctx.fillText('number keys to change number of balls', 10, 105);\n\n  ctx.fillText(`fps: ${calcFPS(lastLoopTimestamp, currentLoopTimestamp)}`, canvas.width - 60, 20);\n  ctx.fillText(`balls: ${count}`, canvas.width - 75, 40);\n  ctx.fillText(`gravity: ${gravity.toFixed(2)}`, canvas.width - 90, 60);\n  ctx.fillText(`bounce: ${bounce.toFixed(2)}`, canvas.width - 90, 80);\n}\n\nconst init = (balls, count) => {\n  for (let i = 0; i < count; i++) {\n    const radius = Math.floor(Math.random() * 25) + 20;\n    const startVx = Math.floor(Math.random() * ([-1, 1][Math.random() * 2 | 0] * 15));\n    const startVy = Math.floor(Math.random() * 25) - 10;\n\n    const startX = Math.floor(Math.random() * canvas.width - radius);\n    const startY = Math.floor(Math.random() * (canvas.height / 4) - radius) + radius;\n\n    const red = Math.floor(Math.random() * 255);\n    const blue = Math.floor(Math.random() * 255);\n    const green = Math.floor(Math.random() * 255);\n\n    const color = `rgba(${red}, ${green}, ${blue}, 0.975)`;\n\n    balls[i] = new Ball(\n      canvas, ctx, radius, startX, startY, startVx, startVy, color, gravity, bounce\n    );\n  }\n};\n\n// Main Loop\nconst draw = (ctx, balls) =>{\n  currentLoopTimestamp = Date.now();\n\n  ctx.clearRect(0,0,canvas.width,canvas.height);\t//Clear last frame\n\n  const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height * 2);\n\n  gradient.addColorStop(0, '#222222');\n  gradient.addColorStop(1, '#000000');\n  ctx.fillStyle = gradient;\n\n  // ctx.fillStyle = '#111';\n  ctx.fillRect(0,0,canvas.width,canvas.height);\t// Background\n\n  drawText(ctx);\n\n  balls.forEach(b => {\n    b.setGravity(gravity)\n    b.setBounce(bounce)\n    b.update()\n  });\n\n  lastLoopTimestamp = currentLoopTimestamp;\n\n  requestAnimationFrame(() => draw(ctx, balls));\n};\n\nwindow.addEventListener('resize', () => {\n  canvas.height = window.innerHeight;\n  canvas.width = window.innerWidth;\n});\n\nwindow.addEventListener('keydown', (e) => {\n  switch(e.code) {\n    case 'Space':\n      balls.length = 0;\n      init(balls, count);\n      break;\n\n    case 'ArrowUp':\n      gravity += 0.1;\n      break;\n\n    case 'ArrowDown':\n      gravity -= 0.1;\n      break;\n\n    case 'ArrowRight':\n      bounce += 0.1;\n      break;\n\n    case 'ArrowLeft':\n      bounce -= 0.1;\n      break;\n\n    case 'Digit1':\n      count = 10 * countMultiplier;\n      balls.length = 0;\n      init(balls, count);\n      break;\n\n    case 'Digit2':\n      count = 20 * countMultiplier;\n      balls.length = 0;\n      init(balls, count);\n      break;\n\n    case 'Digit3':\n      count = 30 * countMultiplier;\n      balls.length = 0;\n      init(balls, count);\n      break;\n\n    case 'Digit4':\n      count = 40 * countMultiplier;\n      balls.length = 0;\n      init(balls, count);\n      break;\n\n    case 'Digit5':\n      count = 50 * countMultiplier;\n      balls.length = 0;\n      init(balls, count);\n      break;\n\n    case 'Digit6':\n      count = 60 * countMultiplier;\n      balls.length = 0;\n      init(balls, count);\n      break;\n\n    case 'Digit7':\n      count = 70 * countMultiplier;\n      balls.length = 0;\n      init(balls, count);\n      break;\n\n    case 'Digit8':\n      count = 80 * countMultiplier;\n      balls.length = 0;\n      init(balls, count);\n      break;\n\n    case 'Digit9':\n      count = 90 * countMultiplier;\n      balls.length = 0;\n      init(balls, count);\n      break;\n  }\n});\n\n// Set the canvas dimensions to that of the window\ncanvas.height = window.innerHeight;\ncanvas.width = window.innerWidth;\n\ninit(balls, count);\ndraw(ctx, balls);\n"]}